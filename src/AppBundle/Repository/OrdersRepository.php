<?php

namespace AppBundle\Repository;

use Doctrine\Bundle\DoctrineBundle\DependencyInjection\DoctrineExtension;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping;
use Doctrine\ORM\Query\ResultSetMapping;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Validator\Constraints\DateTime;

/**
 * OrdersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrdersRepository extends \Doctrine\ORM\EntityRepository
{
    public function __construct(EntityManager $em, Mapping\ClassMetadata $class)
    {
        parent::__construct($em, $class);
        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
        $emConfig->addCustomDatetimeFunction('MONTH', 'DoctrineExtensions\Query\Mysql\Month');
        $emConfig->addCustomDatetimeFunction('DAY', 'DoctrineExtensions\Query\Mysql\Day');
    }

    /**
     * @return array
     */
    public function findLastNewOrders()
    {
        $q = $this->createQueryBuilder('o')->
        select('o') ->andWhere('o.viewed=false')
            ->orderBy('o.createdTime', 'DESC')->setMaxResults(5);
        return $q->getQuery()->getResult();
    }

    /**
     * @return mixed
     */
    public function ordersWeekly($id_families=array())
    {
        $id_status = array(2, 3);
        $start_week = date("Y-m-d", strtotime('monday this week'));
        $end_week = date("Y-m-d", strtotime('sunday this week'));
        $q = $this->createQueryBuilder('o');
        $q->
        select('o')->add('where', $q->expr()->between(
            'o.createdTime',
            ':from',
            ':to'
        )
        )->setParameters(array('from' => $start_week, 'to' => $end_week))
            ->andWhere('o.status IN (:ids)')
            ->setParameter('ids', $id_status)
            ->andWhere('o.shop IN (:id_families)')
            ->setParameter('id_families', $id_families);
        $results= $q->getQuery()->getResult();
        $total=0;
        foreach ($results as $order){
            $total+=$order->getAmount()*($order->getCurrency()->getConversionRate());
        }
        return $total;
    }

    /**
     * @return mixed
     */
    public function ordersMonthly($id_families=array())
    {
        $id_status = array(2, 3);
        $start_week = date("Y-m-d", strtotime('first day of this month'));
        $end_week = date("Y-m-d", strtotime('last day of this month'));
        $q = $this->createQueryBuilder('o');
        $q->
        select('o')->add('where', $q->expr()->between(
            'o.createdTime',
            ':from',
            ':to'
        )
        )->setParameters(array('from' => $start_week, 'to' => $end_week))
            ->andWhere('o.status IN (:ids)')
            ->setParameter('ids', $id_status)
            ->andWhere('o.shop IN (:id_families)')
            ->setParameter('id_families', $id_families);
        $results= $q->getQuery()->getResult();
        $total=0;
        foreach ($results as $order){
            $total+=$order->getAmount()*($order->getCurrency()->getConversionRate());
        }
        return $total;
        //return $q->getQuery()->getSingleScalarResult();
    }

    /**
     * @return mixed
     */
    public function overageRevenue($id_families=array())
    {
        $id_status = array(2, 3);
        $q = $this->createQueryBuilder('o')
            ->select('o')
            ->andWhere('o.status IN (:ids)')
            ->setParameter('ids', $id_status)
            ->andWhere('o.shop IN (:id_families)')
            ->setParameter('id_families', $id_families);
        $results= $q->getQuery()->getResult();
        $total=0;
        foreach ($results as $order){
            $total+=$order->getAmount()*($order->getCurrency()->getConversionRate());
        }
        return $total;
    }

    public function basicAreaData($id_families=array())
    {
        $months=array('Janvier','Fevrier','Mars','Avril','Mai','Juin','Juillet','Aout','Septembre','Octobre','Novembre','Decembre');
        $results = $this
            ->createQueryBuilder('o')
            ->select(' SUM(o.amount) AS total,MONTH(o.createdTime) as month,count(o.amount) as orders')
            ->andWhere('o.shop IN (:id_families)')
            ->setParameter('id_families', $id_families)
            ->groupBy('month')
            ->getQuery()
            ->getResult();

        $data_month=array();
        $data_orders=array();
        foreach ($results as $res){
            $data_month[]=$months[$res['month']-1];
            $data_orders[]=$res['orders'];
        }

        $data=array('success'=>true,'months'=>$data_month,'orders'=>$data_orders);
        return $data;
    }

    public function dataTable($data = array(), $locale = "fr", $page = 0, $max = NULL, $getResult = true, $columnOrder = NULL, $dirOrder = NULL)
    {
        $qb = $this->createQueryBuilder("o");
        $query = isset($data['query']) && $data['query'] ? $data['query'] : null;
        $qb->select('o');
        if ($query)
            $qb
                ->andWhere(
                    $qb->expr()->orX(
                        $qb->expr()->like("UPPER(o.family)", "UPPER(:query)"),
                        $qb->expr()->like("UPPER(o.status)", "UPPER(:query)")
                    )
                )
                ->setParameter('query', "%" . $query . "%");
        if ($columnOrder)
            $qb->orderBy("c.$columnOrder", $dirOrder);
        if ($max)
            $preparedQuery = $qb
                ->getQuery()
                ->setMaxResults($max)
                ->setFirstResult($page * $max);
        else
            $preparedQuery = $qb
                ->getQuery();


        return $getResult ? $preparedQuery->getResult() : $preparedQuery;
    }
}
